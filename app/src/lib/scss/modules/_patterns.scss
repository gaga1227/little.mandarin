/*
# Patterns
** common CSS patterns **
*/

// prefix column
.with-prefix-col {
    @include flexbox();
    > .prefix-col {
        display: block;
        @include flex(0, 0, auto);
        margin: 0 1em 0 0;
    }
    > input.prefix-col {
        margin-right: 20px;
        &[type="checkbox"],
        &[type="radio"] {
            width: 13px;
            height: 13px;
            margin-top: 2px;
        }
    }
    > .content-col {
        display: block;
        @include flex(1, 1, auto);
    }
}

// content revealer
// css interaction only, not forcing styles
.revealer {
    // checkbox component as native switcher
    > .revealer-switch {
        display: none !important;
    }

    // content container
    > .revealer-content {
        max-height: 0;
        overflow: hidden;
        @include transition(max-height, 0.3s, $easeOutCirc);
    }
    > .revealer-switch:checked ~ .revealer-content {
        max-height: 500px;
        @include transition(max-height, 0.3s, $easeInCirc);
    }
}

// accordion
// css interaction only, not forcing styles
.accordion {
    // item
    .accordion-item {
        // switch
        .accordion-item-switch {
            display: none !important;
        }

        // content container
        .accordion-item-content {
            max-height: 0;
            overflow: hidden;
            @include transition(max-height, 0.3s, $easeOutCirc);
        }
        .accordion-item-switch:checked ~ .accordion-item-content {
            max-height: 500px;
            @include transition(max-height, 0.3s, $easeInCirc);
        }

        // disabled
        &[disabled] {
            // trigger
            .accordion-item-trigger {
                cursor: default;
                pointer-events: none;
            }
        }
    }
}

// data row (traditonal)
.data-row {
    display: block;
    position: relative;
    overflow: hidden;
    padding: 0 10px;
    font-size: 0;

    // cell
    .data-cell {
        display: inline-block;
        padding: 10px;
        font-size: 14px;
        vertical-align: top;
    }

    // position variants
    &.alignMiddle {
        > .data-cell {
            vertical-align: middle;
        }
    }
    &.alignBottom {
        > .data-cell {
            vertical-align: baseline;
        }
    }
}

// data row (using flex)
.data-row {
    &.flex {
        @include flexbox();
        @include flex-flow(row wrap); // use 'wrap' to be consistent to traditional data row behavior
        @include align-items(flex-start);

        // cell
        .data-cell {
            @include flex(0, 0, auto);
            vertical-align: baseline;
        }

        // alignment variants
        &.alignMiddle {
            @include align-items(center);
        }
        &.alignBottom {
            @include align-items(flex-end);
        }
    }
}

// Text with icon as prefix (default) or postfix
.text-with-icon {
    @include flexbox();
    @include flex-flow();
    @include align-items(flex-start);

    // icon
    > .sbt-icon {
        display: inline-block;
        @include flex(0, 0, 1em);
        width: 1em;
        height: 1em;
        margin: 0 0.4em 0 0;
        color: $iron;
        font-size: inherit;
        line-height: 1em;
        &:before {
            font-size: inherit;
            line-height: inherit;
        }
    }

    // alignment variants
    &.alignMiddle {
        @include align-items(center);
    }
    &.alignBottom {
        @include align-items(flex-end);
    }

    // postfix
    &.postfix-icon {
        @include flex-direction(row-reverse);
        > .sbt-icon {
            margin: 0 0 0 0.4em;
        }
    }
}

// Container with vertically center aligned contents
.vcenter-container {
    @include flexbox();
    @include align-items(center);

    // inner content container
    > .vcenter-content {
        width: 100%;
    }
}

// Separation line with text in center
.hr-with-text {
    display: block;
    width: auto;
    height: 2px;
    margin: 10px auto;
    color: $base;
    background: $smoke;
    font-size: 0;
    line-height: 0;
    text-align: center;

    // text label
    .text {
        display: inline-block;
        max-width: 80%;
        margin-top: -0.5em;
        padding: 0 0.8em;
        background: $white;
        font-size: 13px;
        line-height: 1.2em;
        @include text-truncate();
    }
}


// invisible select
// custom look selection with native behavior
.invisible-select {
    // select
    > select.invisible-select-mask {
        // occupy entire area as a mask
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        z-index: 10;

        // behavior indication
        cursor: pointer!important;

        // make sure self is invisible
        color: transparent!important;
        background: none!important;
        border: none!important;
        opacity: 0; // IE

        // let option items visible
        optgroup,
        option {
            color: $black;
            background: $white;
        }
    }
}
