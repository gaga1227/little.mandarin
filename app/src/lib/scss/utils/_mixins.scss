/*
# mixins
** common utils mixins **
*/

// Extenders
// -------------------------------------------------------------------------------------------


// Utils
// -------------------------------------------------------------------------------------------

// Image Background Text Replacement
// copied from Desktop R20
@mixin ir() {
	border: 0!important;
	font: 0/0 a!important;
	text-shadow: none!important;
	color: transparent!important;
}

// Clear fix
// copied from Desktop R19
@mixin cfix() {
	&:before,
	&:after {
		content:" "; // avoid opera space bug
		display:table; // contain child element top margin
	}
	&:after {
		clear:both;
	}
	*zoom:1; // For IE 6/7 only
}

// Text Truncate with elipsis
// copied from Desktop R20
@mixin text-truncate() {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

// Text Truncate with elipsis for multiline block
// Only supported by webkit browsers
@mixin text-block-truncate($lines) {
	@if($lines != null) {
		display: -webkit-box;
		-webkit-line-clamp: $lines;
		-webkit-box-orient: vertical;
		overflow: hidden;
		text-overflow: ellipsis;
	}
}

// CSS3 properties
// -------------------------------------------------------------------------------------------

// Background Gradient
@mixin gradient($startColor: #fff, $endColor: #000) {
	background-color: $startColor;
	background-image: -webkit-linear-gradient($startColor, $endColor);
	background-image: linear-gradient($startColor, $endColor);
}

// Box-shadow
@mixin box-shadow($shadows...) {
	@if($shadows != null) {
		-webkit-box-shadow: $shadows;
		box-shadow: $shadows;
	}
}

// Box-sizing
@mixin box-sizing($sizing) {
	@if($sizing != null) {
		-webkit-box-sizing: $sizing;
		box-sizing: $sizing;
	}
	@else {
		-webkit-box-sizing: border-box;
		box-sizing: border-box;
	}
}

// input placeholder
@mixin placeholder($color:#000, $style:normal, $target:null) {
	@if ($target != null) {
		&::-webkit-input-placeholder { color: #{$color}; font-style:#{$style}; }
		&:-moz-placeholder { color: #{$color}; font-style:#{$style}; }
		&::-moz-placeholder { color: #{$color}; font-style:#{$style}; }
		&:-ms-input-placeholder { color: #{$color}; font-style:#{$style}; }
	}
	@else {
		::-webkit-input-placeholder { color: #{$color}; font-style:#{$style}; }
		:-moz-placeholder { color: #{$color}; font-style:#{$style}; }
		::-moz-placeholder { color: #{$color}; font-style:#{$style}; }
		:-ms-input-placeholder { color: #{$color}; font-style:#{$style}; }
	}
}

// Transform combined mixin
@mixin transform ($transforms) {
	@if($transforms != null) {
		-webkit-transform: $transforms;
		-ms-transform: $transforms;
		transform: $transforms;
	}
}

// Transform origin
@mixin transform-origin ($origin) {
	@if($origin != null) {
		-webkit-transform-origin: $origin;
		-ms-transform-origin: $origin;
		transform-origin: $origin;
	}
}

// Transitions mixins
@mixin transition($transition-property: all, $transition-time: .25s, $method: ease-in-out) {
	-webkit-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

// transition-property
@mixin transition-property($transition-property...) {
	@if ($transition-property != null) {
		-webkit-transition-property: $transition-property;
		transition-property: $transition-property;
	}
}

// transition-duration
@mixin transition-duration($transition-duration: .25s) {
	-webkit-transition-duration: $transition-duration;
	transition-duration: $transition-duration;
}

// transition-timing-function
@mixin transition-timing-function($transition-timing-function: ease) {
	-webkit-transition-timing-function: $transition-timing-function;
	transition-timing-function: $transition-timing-function;
}

// transition-delay
@mixin transition-delay($transition-delay: .1s) {
	-webkit-transition-delay: $transition-delay;
	transition-delay: $transition-delay;
}

// perspective
// copied from Desktop R20
@mixin perspective ($val: 400px) {
	-webkit-perspective: $val;
	perspective: $val;
}

// perspective-origin
// copied from Desktop R20
@mixin perspective-origin ($h: 50%, $v: 50%) {
	-webkit-perspective-origin: $h $v;
	perspective-origin: $h $v;
}

// backface-visibility
// copied from Desktop R20
@mixin backface-visibility ($val: hidden) {
	-webkit-backface-visibility: $val;
	backface-visibility: $val;
}

// keyframe animation
@mixin animation ($anim, $duration: 1s, $timing: ease-in-out, $fillmode: both) {
	@if($anim != null) {
		-webkit-animation-name: $anim;
		animation-name: $anim;
		-webkit-animation-duration: $duration;
		animation-duration: $duration;
		-webkit-animation-timing-function: $timing;
		animation-timing-function: $timing;
		-webkit-animation-fill-mode: $fillmode;
		animation-fill-mode: $fillmode;
	}
}

// Will change
// INFO: https://dev.opera.com/articles/css-will-change-property/
@mixin will-change($properties...) {
	@if ($properties != null) {
		will-change: $properties;
	}
}

// layout helpers
// -------------------------------------------------------------------------------------------

// inline-block grid row
@mixin grid-inline-row($textAlign:left, $verticalAlign:top) {
	letter-spacing: -0.31em;
	text-rendering: auto;
	text-align: $textAlign;
	> * {
		display: inline-block;
		vertical-align: $verticalAlign;
		letter-spacing: normal;
		text-rendering: auto;
		text-align: left;
	}
}

// flex mixins
// https://github.com/mastastealth/sass-flex-mixin/blob/master/flex.scss
// -------------------------------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)
@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property
@mixin flex($fg: 1, $fs: null, $fb: null) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property
@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property
@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property
@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

// Decorator patterns
// -------------------------------------------------------------------------------------------

// bordered-arrow
@mixin bordered-arrow($dir: 'up', $size: 10px, $strokeSize: 1px, $strokeColor: $iron, $fillColor: $white) {
	// reset positon anchor on parent
	display: block;
	position: relative;

	// common rules
	&:before,
	&:after {
		content: '';
		display: block;
		position: absolute;
		border-style: solid;
		border-width: $size;
		width: 0;
		height: 0;
		font-size: 0;
		line-height: 0;
		overflow: hidden;
	}

	// apply colors
	&:before {
		border-color: $strokeColor;
	}
	&:after {
		border-color: $fillColor;
	}

	// apply rules depending on arrow direction
	@if ($dir == 'up') {
		&:before,
		&:after {
			// pos
			top: -($size - $strokeSize);
			left: 50%;
			margin-left: -$size;
			// direction
			border-top-width: 0;
			border-left-color: transparent!important;
			border-right-color: transparent!important;
		}
		&:before {
			// fake stroke
			top: -$size;
		}
	}
	@else if ($dir == 'down') {
		&:before,
		&:after {
			// pos
			top: auto;
			bottom: -($size - $strokeSize);
			left: 50%;
			margin-left: -$size;
			// direction
			border-bottom-width: 0;
			border-left-color: transparent!important;
			border-right-color: transparent!important;
		}
		&:before {
			// fake stroke
			bottom: -$size;
		}
	}
	@else if ($dir == 'left') {
		&:before,
		&:after {
			// pos
			top: 50%;
			bottom: auto;
			left: -($size - $strokeSize);
			margin-top: -$size;
			// direction
			border-left-width: 0;
			border-top-color: transparent!important;
			border-bottom-color: transparent!important;
		}
		&:before {
			// fake stroke
			left: -$size;
		}
	}
	@else if ($dir == 'right') {
		&:before,
		&:after {
			content: '';
			// pos
			top: 50%;
			bottom: auto;
			right: -($size - $strokeSize);
			margin-top: -$size;
			// direction
			border-right-width: 0;
			border-top-color: transparent!important;
			border-bottom-color: transparent!important;
		}
		&:before {
			// fake stroke
			right: -$size;
		}
	}
}
